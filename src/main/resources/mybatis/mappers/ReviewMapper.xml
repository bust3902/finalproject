<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="kr.co.nc.mapper.ReviewMapper">
	
	<!-- void insertReview(Review review); -->
	<insert id="insertReview" parameterType="Review">
		insert into review
		(review_no, user_no, restaurant_no, acco_id, review_title, review_content, review_like_count, review_image, review_point)
		values
		(review_seq.nextval, #{user.no}, #{restaurant.no}, #{acco.id}, #{title}, #{content}, #{likeCount}, #{image} #{point})
	</insert>
	
	<!-- void updateReview(Review review); -->
	<update id="updateReview" parameterType="Review">
		update
			review
		set
			review_title = #{title},
			review_content = #{content},
			review_like_count = #{likeCount},
			review_image = #{image},
			review_updated_date = sysdate
		where
			review_no = #{no}
	</update>
		
	<!-- void deleteReview(Review reivew); -->
		<delete id="deleteReview" parameterType="Review">
			delete from review
			where review_no = #{no}
		</delete>
	
	<!-- void insertReviewCategory(ReviewCategory reviewCategory); -->
	<insert id="insertReviewCategory" parameterType="ReviewCategory">
		insert into review_categories
		(review_no, category_id)
		values
		(#{reviewNo}, #{category.id})
	</insert>
		
	<!-- reviewResultMap -->
	<resultMap type="Review" id="reviewResultMap">
		<id column="review_no" property="no"/>
		<result column="review_title" property="title"/>
		<result column="review_content" property="content"/>
		<result column="review_like_count" property="likeCount"/>
		<result column="review_created_date" property="createdDate"/>
		<result column="review_updated_date" property="updatedDate"/>
		<result column="review_image" property="image"/>
		<result column="review_point" property="point"/>
		<result column="user_nickname" property="user.nickname"/>
		<result column="room_name" property="room.name"/>
		<collection column="restaurant_no" property="reviewRestaurantTags" select="getAllReviewTagsByRestaurantNo"></collection>
	</resultMap>
	
	<!-- List<Review> getAllReviewsById(ReviewCriteria criteria); -->
	<select id="getReviewsByCriteria" parameterType="kr.co.nc.criteria.ReviewCriteria" resultMap="reviewResultMap">
		select *
			from review rv, users u, restaurant rs
			<if test="accoId != 0">
				, acco_rooms ar
			</if>
		<where>
			rv.review_deleted = 'N'
			and rv.user_no = u.user_no
			<choose>
				<when test="accoId != 0">
					and rv.acco_id = #{accoId}
					and rv.room_no = ar.room_no
				</when>
				<when test="restaurantNo != 0">
					and rv.restaurant_no = #{restaurantNo}
					and rv.restaurant_no = rs.restaurant_no
				</when>
			</choose>
		</where>
		order by rv.review_created_date desc
	</select>
	
	<!-- List<String> getAllReviewTagsByRestaurantNo(int no); -->
	<select id="getAllReviewTagsByRestaurantNo" parameterType="int" resultType="string">
		select restaurant_tag
		from restaurant_tag
		where restaurant_no = #{value}
	</select>
	
	<!--  List<Map<String, Integer>> countReviewPointsByAccoId(int accoId); -->
	<select id="countReviewPointsByAccoId" parameterType="int" resultType="hashmap">
		with points
		as (select 1 as review_point from dual
		    union all select 2 from dual
		    union all select 3 from dual
		    union all select 4 from dual
		    union all select 5 from dual)
		select p.review_point as point, nvl(x.cnt,0) as count
		from points p,
		    (select review_point, count(*) cnt from review where acco_id=#{value} group by review_point) x
		where x.review_point (+) = p.review_point
		order by p.review_point
	</select>
	
	<!-- List<Review> getAllReviews(); -->
	<select id="getAllReviews" resultType="Review">
		select *
		from review
		where review_created_date desc
	</select>
</mapper>