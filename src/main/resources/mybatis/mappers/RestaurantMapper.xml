<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="kr.co.nc.mapper.RestaurantMapper">

	<!-- userMapper가 만들어지는대로 association 등록하기-->
	<resultMap type="Review" id="ReviewResultMap">
		<id column="REVIEW_NO" property="no"/>
		<result column="ACCO_ID" property="accoId"/>
		<result column="REVIEW_TITLE" property="title"/>
		<result column="REVIEW_CONTENT" property="content"/>
		<result column="REVIEW_LIKE_COUNT" property="likeCount"/>
		<result column="REVIEW_CREATED_DATE" property="createdDate"/>
		<result column="REVIEW_UPDATED_DATE" property="updatedDate"/>
		<result column="REVIEW_DELETED" property="deleted"/>
		<result column="REVIEW_IMAGE" property="image"/>
		<result column="REVIEW_POINT" property="point"/>
		<association property="user" column="user_no" select="kr.co.nc.mapper.UserMapper."></association>
		<association property="restaurant" column="RESTAURANT_NO" select="kr.co.nc.mapper.RestaurantMapper"></association>
		<!-- <association property="user" column="user_no"></association> -->
	</resultMap>
	
	<!-- List<Review> getReviewByRestaurantNo(int restaurantNo); 음식점 리뷰-->
	<select id="getReviewByRestaurantNo" parameterType="int" resultMap="ReviewResultMap">
		select *
		from REVIEW
		where
			ACCO_ID is NULL and REVIEW_DELETED = 'N'
			and RESTAURANT_NO = #{value}
		order by
			REVIEW_CREATED_DATE desc
	</select>

	<resultMap type="Restaurant" id="RestaurantResultMap">
		<id column="RESTAURANT_NO" property="no"/>
		<result column="RESTAURANT_NAME" property="name"/>
		<result column="RESTAURANT_LOCATION" property="location"/>
		<result column="RESTAURANT_IMGNAME" property="imgname"/>
		<result column="RESTAURANT_TEL" property="tel"/>
		<result column="RESTAURANT_LIKE_COUNT" property="likeCount"/>
		<result column="RESTAURANT_REVIEW_COUNT" property="reviewCount"/>
		<result column="RESTAURANT_REVIEW_POINT" property="reviewPoint"/>
		<result column="RESTAURANT_CREATED_DATE" property="createdDate"/>
		<result column="RESTAURANT_UPDATE_DATE" property="updateDate"/>
		<result column="RESTAURANT_LATITUD" property="latitud"/>
		<result column="RESTAURANT_LONGITUDE" property="longitude"/>
		<result column="RESTAURANT_DELETE" property="delete"/>
		<result column="CITY_ID" property="cityId"/>
		<result column="RESTAURANT_OPENING" property="opening"/>
		<result column="RESTAURANT_BREAK_TIME" property="breakTime"/>
		<result column="RESTAURANT_CLOSE" property="close"/>
	</resultMap>
	
	<!-- List<RestaurantMenu> getRestaurantMenusByRestaurantNo(int restaurantNo); -->
	<select id="getRestaurantMenusByRestaurantNo" parameterType="int" resultType="RestaurantMenu">
		select RESTAURANT_NO as restaurantNo, RESTAURANT_MENU_NAME as menuName, RESTAURANT_PRICE as price
		from RESTAURANT_MENU
		where RESTAURANT_NO = #{value}
	</select>
	
	<!-- List<RestaurantTag> getRestaurantTagsByRestaurantNo(int restaurantNo);-->
	<select id="getRestaurantTagsByRestaurantNo" parameterType="int" resultType="RestaurantTag">
		select RESTAURANT_NO as restaurantNo, RESTAURANT_TAG as tag
		from RESTAURANT_TAG
		where RESTAURANT_NO = #{value}
	</select>
	
	<!-- List<RestaurantCategory> getRestaurantCategoriesByRestaurantNo(int restaurantNo); -->
	<select id="getRestaurantCategoriesByRestaurantNo" parameterType="int" resultType="RestaurantCategory">
		select A.RESTAURANT_NO as restaurantNo,
				A.RESTAURANT_CAT_ID as "category.id",
				B.RESTAURANT_CAT_NAME as "category.name"
		from RESTAURANT_CAT A,RESTAURANT_CAT_NAME B
		where A.RESTAURANT_NO = #{value}
		and A.RESTAURANT_CAT_ID = B.RESTAURANT_CAT_ID
		
	</select>
	<!--Restaurant의 있는 정보 싹다 가져오는 resultMap 디테일 출력시 이용 -->
	<resultMap type="Restaurant" id="RestaurantDetailResultMap" extends="RestaurantResultMap">
		<collection property="menus" column="restaurant_no" select="kr.co.nc.mapper.RestaurantMapper.getRestaurantMenusByRestaurantNo"></collection>
		<collection property="tags" column="restaurant_no" select="kr.co.nc.mapper.RestaurantMapper.getRestaurantTagsByRestaurantNo"></collection>
		<collection property="categories" column="restaurant_no" select="kr.co.nc.mapper.RestaurantMapper.getRestaurantCategoriesByRestaurantNo"></collection>
	</resultMap>
	
	<!-- Restaurant getRestaurantByNo(int restaurantNo); -->
	<select id="getRestaurantByNo" parameterType="int" resultMap="RestaurantDetailResultMap">
		select *
		from RESTAURANT
		where RESTAURANT_NO = #{value}
	</select>
	
	<!-- List<String> getAllTags(); -->
	<select id="getAllTags" resultType="java.util.Map">
		select distinct RESTAURANT_TAG, RESTAURANT_NO
		from RESTAURANT_TAG
	</select>
	
	<!-- List<Review> getAllReview(); -->
	<select id="getAllReview" resultMap="ReviewResultMap">
		select *
		from REVIEW
		where
			ACCO_ID is NULL and REVIEW_DELETED = 'N'
			and RESTAURANT_NO = #{value}
		order by
			REVIEW_CREATED_DATE desc
	</select>
	
	<!-- List<Restaurant> getRestaurantsByCategoryId(@Param("categoryId") String categoryId); -->
	<select id="getRestaurantsByCategoryId">
		select *
		from RESTAURANT
		<if test="categoryId != null">
			where RESTAURANT_NO in (select RESTAURANT_NO
									from RESTAURANT_CAT
									where RESTAURANT_CAT_ID = #{categoryId})
		</if>
		order by RESTAURANT_CREATED_DATE desc
	</select>
	
	<!-- List<Restaurant> getRestaurantByCriteria(RestaurantCriteria criteria); -->
	<select id="getRestaurantByCriteria" parameterType="kr.co.nc.criteria.RestaurantCriteria" resultMap="RestaurantResultMap">
		select *
		from RESTAURANT
		<where>
			<if test="categoryId != null">
				RESTAURANT_NO in (select RESTAURANT_NO
									from RESTAURANT_CAT
									where RESTAURANT_CAT_ID = #{categoryId})
				
			</if>
			<if test="tags != null">
				and RESTAURANT_NO in (select RESTAURANT_NO
										from RESTAURANT_TAG
										where RESTAURANT_TAG in
										<foreach collection="tags" item="tag" open="(" close=")" separator=",">
											#{tag}
										</foreach> )		
			</if>
		</where>
		<choose>
			<when test="sort == 'point'">
				order by RESTAURANT_REVIEW_POINT desc
			</when>
			<when test="sort == 'count'">
				order by RESTAURANT_REVIEW_COUNT desc
			</when>
			<when test="sort == 'like'">
				order by RESTAURANT_LIKE_COUNT desc
			</when>
			<when test="sort == 'distance'">
				order by RESTAURANT_NO desc
			</when>
		</choose>
	</select>
	
	<!-- List<Category> getAllCategories();-->
	<select id="getAllCategories" resultType="java.util.Map">
		select cname.RESTAURANT_CAT_ID as id , cname.RESTAURANT_CAT_NAME as name
		from RESTAURANT_CAT_NAME cname
		order by RESTAURANT_CAT_ID
	</select>
	
	<!-- RestaurantCategory getCategoryById(String categoryId); -->
	<select id="getCategoryById" parameterType="string" resultType="RestaurantCategory">
		select RESTAURANT_CAT_ID as id , RESTAURANT_CAT_NAME as name
		from RESTAURANT_CAT_NAME
		where RESTAURANT_CAT_ID = #{value}
	</select>
	
	<!-- List<City> getAllCity(); -->
	<select id="getAllCity" resultType="kr.co.nc.vo.City">
		select city_id as id, city_name as name, city_latitude as latitude, city_longitude as longitude
		from cities
		order by city_id
	</select>
	
	<select id="searchKeyword" parameterType="java.util.Map" resultType="java.util.Map">
		SELECT
		    res.restaurant_no,
		    res.restaurant_name,
		    res.restaurant_location,
		    res.restaurant_imgname,
		    res.restaurant_tel,
		    res.restaurant_like_count,
		    res.restaurant_review_count,
		    res.restaurant_review_point,
		    res.restaurant_created_date,
		    res.restaurant_update_date,
		    res.restaurant_latitud,
		    res.restaurant_longitude,
		    res.restaurant_delete,
		    res.city_id,
		    res.restaurant_opening,
		    res.restaurant_break_time,
		    res.restaurant_close		    
		FROM
		    restaurant res
		WHERE res.restaurant_no in (
		        SELECT
		            restaurant_no
		        FROM
		        (
		            SELECT
		                   res1.restaurant_no
		            FROM
		                restaurant res1, restaurant_tag rtag1, restaurant_menu menu1
		            WHERE res1.restaurant_no = rtag1.restaurant_no
		            AND res1.restaurant_no = menu1.restaurant_no
		            AND (res1.restaurant_name like '%' || #{keyword} || '%' or rtag1.restaurant_tag like '%' || #{keyword} || '%' or menu1.restaurant_menu_name like '%' || #{keyword} || '%')
					<if test="categories != null and categories != ''">
						AND res1.restaurant_no in (
								select 
									src.restaurant_no 
								from RESTAURANT_CAT src 
								where src.restaurant_cat_id = #{categories}
							)
					</if>					
		            )    
		            GROUP BY restaurant_no
		)
		<if test="order == 1">
		ORDER BY RESTAURANT_LIKE_COUNT DESC
		</if>
	</select>
</mapper>